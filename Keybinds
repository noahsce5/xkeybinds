game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "X-Ware Keybinds",
    Text = "X-Ware Protected by ScriptShield"
})
wait(3)
local targetUserId = 5372039315
local localPlayer = game.Players.LocalPlayer

local function checkAuthorization(player)
    if player.UserId ~= targetUserId then
        player:Kick("ScriptShield has detected unauthorized access to X-Ware Scripts. If this is a mistake, please contact Noah at tisnoah#0 to be whitelisted.")
    end
end

checkAuthorization(localPlayer)


game.Players.PlayerAdded:Connect(function(player)
    checkAuthorization(player)
end)
local Player = game.Players.LocalPlayer
local Character = Player.Character
local hum = Character.HumanoidRootPart
local Position = hum.CFrame
local Rep = game:GetService("ReplicatedStorage")
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Gui = Library.CreateLib("X-Ware | Keybinds GUI", "BloodTheme")
local Binds = Gui:NewTab("Keybinds");
local WB = Binds:NewSection("Witch Keybinds")
local Gui = Gui:NewTab("Gui");
local G = Gui:NewSection("Gui")
local Ban1 = game:GetService("ReplicatedStorage").Events:FindFirstChild("ModBan")
local Ban2 = game:GetService("ReplicatedStorage").Events:FindFirstChild("BanClient")
local Ban3 = game:GetService("ReplicatedStorage").Events:FindFirstChild("Ban")
local Ban4 = game:GetService("ReplicatedStorage").Events:FindFirstChild("idontexploit")
local Ban5 = game:GetService("ReplicatedStorage").Events:FindFirstChild("logAction")
local Ban6 = game:GetService("ReplicatedStorage").Events:FindFirstChild("logAction")

while _G.ANTIBAN == true do
    if Ban1 then
        Ban1:Destroy()
    end
    if Ban2 then
        Ban2:Destroy()
    end
    if Ban3 then
        Ban3:Destroy()
    end
    if Ban4 then
        Ban4:Destroy()
    end
    if Ban5 then
        Ban5:Destroy()
    end
    if Ban6 then
        Ban6:Destroy()
    end
    wait()
end
WB:NewToggle("Keybinds", "If true then Keybinds will work", function(state)
    if state == true then
        game.workspace.XWareValues.Keys.Value = "Active"
    else
        game.workspace.XWareValues.Keys.Value = "In Active"
    end
end)
WB:NewKeybind("Unragdoll", "",Enum.KeyCode.Z, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    if IsTyping then return end
    local args = {
        [1] = 1
    }
    game:GetService("ReplicatedStorage").Events.FallDamage:FireServer(unpack(args))
    end
end)
local AnimationId = "5422859012"

local function playAnimation(character, animationId)
    local Anim = Instance.new("Animation")
    Anim.AnimationId = "rbxassetid://" .. animationId
    local k = character.Humanoid:LoadAnimation(Anim)
    k:Play()
    k:AdjustSpeed(1)
end

WB:NewKeybind("Push", "", Enum.KeyCode.R, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
        local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            local players = {}
            for _, x in ipairs(game:GetService('Players'):GetPlayers()) do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in ipairs(game:GetService('Players'):GetPlayers()) do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue
	            end
                 if player ~= game.Players.LocalPlayer then
                return x
            end
        end
    end
    return false
end
        if IsTyping then
            return
        end

        local player = getPlayer()
        local localPlayer = game.Players.LocalPlayer
        if player and player == localPlayer then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                [1] = "Push",
                [2] = {
                    [1] = player.Character
                }
            }
            
            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
            
            playAnimation(player.Character, AnimationId)
        end
    end
end)
WB:NewKeybind("Immobilus", "", Enum.KeyCode.X, function()
    if game.Workspace.XWareValues.Keys.Value == "Active" then
        local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y, 0)
            local players = {}

            for _, x in next, game:GetService("Players"):GetPlayers() do
                if x.Character then
                    table.insert(players, x.Character)
                end
            end

            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)

            if raycastResult then
                for _, x in next, game:GetService("Players"):GetPlayers() do
                    if raycastResult.Instance:IsDescendantOf(x.Character) and x ~= game.Players.LocalPlayer then
                        return x
                    end
                end
            end
            return nil
        end

        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end

        if IsTyping then return end

        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                [1] = "Magic",
                [2] = {
                    [1] = "Freeze",
                    [2] = player.Character
                }
            }

            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
        end
    end
end)
WB:NewKeybind("Incendia", "", Enum.KeyCode.C, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
        local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            local players = {}
            for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
                if player.Character then
                    table.insert(players, player.Character)
                end
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
                    if raycastResult.Instance:IsDescendantOf(player.Character) then
                        if player ~= game.Players.LocalPlayer then
                            return player
                        end
                    end
                end
            end
            return nil
        end

        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end

        if IsTyping then
            return
        end

        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                "Magic",
                {
                    "FireSpell",
                    player.Character
                }
            }
            for _ = 1, 5 do
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
            end
        end
    end
end)
WB:NewKeybind("Pain", "", Enum.KeyCode.G, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
        local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            local players = {}
            for _, x in ipairs(game:GetService('Players'):GetPlayers()) do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in ipairs(game:GetService('Players'):GetPlayers()) do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
	            end
           	 if x ~= game.Players.LocalPlayer then
                return x
            end
        end
    end
    return false
end

        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end

        if IsTyping then return end
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                "PainInflict",
                {
                    player.Character
                }
            }
            for _ = 1, 15 do
                game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
            end
        end
    end
end)
WB:NewKeybind("Ossox", "",Enum.KeyCode.U, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
            local userInput = game:GetService("UserInputService")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            players = {}
            for _, x in next, game:GetService('Players'):GetPlayers() do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
                    end
                    return x
                end
            end
            return false
        end
        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                [1] = "Magic",
                [2] = {
                    [1] = "SnapNeck",
                    [2] = player.Character
                }
            }
            
            game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																			
        end
    end
end)
WB:NewKeybind("Mass Neck Snap", "",Enum.KeyCode.P, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local args = {
        [1] = "Magic",
        [2] = {
        [1] = "SnapAll"
        }
    }
    
    game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))
    end
end)
WB:NewKeybind("Explode", "",Enum.KeyCode.Y, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local A_1 = "Magic"
    local A_2 = 
    {
        [1] = "Explosion",
        [2] = Mouse.Hit.p
    }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
    end
end)
WB:NewKeybind("Fire Circle", "",Enum.KeyCode.Q, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "FireCircle",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))   																		
    end
    end
end)
WB:NewKeybind("Ring Off", "",Enum.KeyCode.K, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "DisableRing",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)
WB:NewKeybind("Ring On", "",Enum.KeyCode.L, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "EnableRing",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)
WB:NewKeybind("Fire Removal", "",Enum.KeyCode.N, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "NoFire",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																				
    end
    end
end)
WB:NewKeybind("Heart Rip", "",Enum.KeyCode.B, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
	            end
                 if player ~= game.Players.LocalPlayer then
                return x
            end
        end
    end
    return false
end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "TelekineticHeart",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)
WB:NewKeybind("Errox Femus", "",Enum.KeyCode.T, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = "Magic",
            [2] = {
                [1] = "BreakLeg",
                [2] = player.Character
            }
        }
        
        game:GetService("ReplicatedStorage").Events.Witch:FireServer(unpack(args))																				
    end
    end
end)
WB:NewKeybind("Sleep Spell", "",Enum.KeyCode.J, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local A_1 = "Magic"
        local A_2 = 
            {
                [1] = "SleepSpell", 
                [2] = player.Character
            }
        local Event = game:GetService("ReplicatedStorage").Events.Witch
        Event:FireServer(A_1, A_2)																	
    end
    end
end)
WB:NewKeybind("Invisibility", "",Enum.KeyCode.V, function()
    if game.workspace.XWareValues.Keys.Value == "Active" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local A_1 = "Magic"
    local A_2 = 
        {
            [1] = "Invisibility"
        }
    local Event = game:GetService("ReplicatedStorage").Events.Witch
    Event:FireServer(A_1, A_2)
    end
end)
G:NewKeybind("Toggle Gui", "", Enum.KeyCode.Tab, function()
    Library:ToggleUI()
end)
